/*
 * Copyright (C) 2014 Vincent Kruger
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package gamemanager;

import javax.swing.table.DefaultTableModel;

/** Dialog for adding match results in table form
 *
 * @author Vincent Kruger
 */
public class MatchResultsDialog extends javax.swing.JDialog {

    TeamManager teamManager;
    GameManager gameManager;
    
    /**
     * Creates new form MatchResultsDialog
     * 
     */
    public MatchResultsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    /** Creates new MatchResultsDialog
     * 
     * @param parent the parent frame
     * @param modal if the dialog is modal
     * @param teamManager the current TeamManager instance
     * @param gameManager the current GameManager instance
     */
    public MatchResultsDialog(java.awt.Frame parent, boolean modal, 
            TeamManager teamManager, GameManager gameManager) {
        super(parent, modal);
        initComponents();
        this.teamManager = teamManager;
        this.gameManager = gameManager;
        displayTeams();
    }
    
        public MatchResultsDialog(java.awt.Frame parent, boolean modal, 
                Object[][] results, TeamManager teamManager,
                GameManager gameManager) {
        super(parent, modal);
        initComponents();
        this.teamManager = teamManager;
        this.gameManager = gameManager;
        displayResults(results);
    }
    
    /** Displays the team names in the table
     * 
     */
    private void displayTeams() {
        DefaultTableModel model = (DefaultTableModel)
                matchResultsTable.getModel();
        for (int i = 0; i < teamManager.length; ++i) {
            model.addRow(new Object[]{teamManager.getTeam(i).getName(), 0, 0, false});
        }
    }
    
    private void displayResults(Object [][] results) {
        DefaultTableModel model = (DefaultTableModel)
                matchResultsTable.getModel();
        for (int i = 0; i < results.length; ++i) {
            model.addRow(results[i]);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        matchResultsTable = new javax.swing.JTable();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        matchResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Team Name", "Goals Scored", "Goals Against", "Did Not Play"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        matchResultsTable.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        matchResultsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(matchResultsTable);
        if (matchResultsTable.getColumnModel().getColumnCount() > 0) {
            matchResultsTable.getColumnModel().getColumn(0).setMinWidth(300);
            matchResultsTable.getColumnModel().getColumn(0).setPreferredWidth(300);
            matchResultsTable.getColumnModel().getColumn(1).setMinWidth(100);
            matchResultsTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            matchResultsTable.getColumnModel().getColumn(1).setMaxWidth(100);
            matchResultsTable.getColumnModel().getColumn(2).setMinWidth(100);
            matchResultsTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            matchResultsTable.getColumnModel().getColumn(2).setMaxWidth(100);
            matchResultsTable.getColumnModel().getColumn(3).setMinWidth(100);
            matchResultsTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            matchResultsTable.getColumnModel().getColumn(3).setMaxWidth(100);
        }
        matchResultsTable.getAccessibleContext().setAccessibleName("");
        matchResultsTable.getAccessibleContext().setAccessibleDescription("");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.setMaximumSize(new java.awt.Dimension(60, 30));
        okButton.setMinimumSize(new java.awt.Dimension(60, 30));
        okButton.setPreferredSize(new java.awt.Dimension(60, 30));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Event for the OK button being pressed - adds the results to the current
     * division results
     * 
     * @param evt the action event for the button press
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel)
                matchResultsTable.getModel();
        
        Object [][] results = new Object[model.getRowCount()][];
        
        for (int i = 0; i < model.getRowCount(); ++i) {
            Object [] result = new Object[4];
            result[0] = model.getValueAt(i, 0);
            result[1] = model.getValueAt(i, 1);
            result[2] = model.getValueAt(i, 2);
            Object dnp = model.getValueAt(i, 3);
            if (dnp == null) dnp = false;
            result[3] = dnp;
            results[i] = result;
        }
        this.teamManager.addMatchResults(results);
        this.gameManager.refresh();
        cancelButtonActionPerformed(evt);
    }//GEN-LAST:event_okButtonActionPerformed

    /** Event for the cancel button - closes the dialog
     * 
     * @param evt the action event for the button press
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchResultsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchResultsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchResultsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchResultsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MatchResultsDialog dialog = new MatchResultsDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable matchResultsTable;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
