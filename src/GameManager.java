/*
 * Copyright (C) 2014 Vincent Kruger
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package gamemanager;

import java.io.*;
import java.nio.file.Path;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/** The main application class. Manages interfacing with the user and the main
 * application window
 *
 * @author Vincent Kruger
 */
public class GameManager extends javax.swing.JFrame {

    private TeamManager teamManager;
    private String openedFilename;

    /**
     * Creates new form GameManagerUI
     */
    public GameManager() {
        initComponents();
        teamManager = new TeamManager();
        openedFilename = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        teamResultsTable = new javax.swing.JTable();
        addResultsButton = new javax.swing.JButton();
        addNewTeamsButton = new javax.swing.JButton();
        undoResultsButton = new javax.swing.JButton();
        editResultsButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newDivisionMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exportToExcelMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        addTeamsMenuItem = new javax.swing.JMenuItem();
        addResultsMenuItem = new javax.swing.JMenuItem();
        undoResultsMenuItem = new javax.swing.JMenuItem();
        editResultsMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setMinimumSize(new java.awt.Dimension(1030, 410));
        setPreferredSize(new java.awt.Dimension(1030, 410));

        teamResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rank", "Team Name", "Wins", "Losses", "S Draws", "SL Draws", "G Scored", "G Against", "G Difference", "Points"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        teamResultsTable.setAutoscrolls(false);
        teamResultsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(teamResultsTable);
        if (teamResultsTable.getColumnModel().getColumnCount() > 0) {
            teamResultsTable.getColumnModel().getColumn(0).setMinWidth(50);
            teamResultsTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            teamResultsTable.getColumnModel().getColumn(1).setMinWidth(300);
            teamResultsTable.getColumnModel().getColumn(1).setPreferredWidth(300);
            teamResultsTable.getColumnModel().getColumn(2).setMinWidth(80);
            teamResultsTable.getColumnModel().getColumn(2).setPreferredWidth(80);
            teamResultsTable.getColumnModel().getColumn(3).setMinWidth(80);
            teamResultsTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            teamResultsTable.getColumnModel().getColumn(4).setMinWidth(80);
            teamResultsTable.getColumnModel().getColumn(4).setPreferredWidth(80);
            teamResultsTable.getColumnModel().getColumn(5).setMinWidth(80);
            teamResultsTable.getColumnModel().getColumn(5).setPreferredWidth(80);
            teamResultsTable.getColumnModel().getColumn(6).setMinWidth(80);
            teamResultsTable.getColumnModel().getColumn(6).setPreferredWidth(80);
            teamResultsTable.getColumnModel().getColumn(7).setMinWidth(80);
            teamResultsTable.getColumnModel().getColumn(7).setPreferredWidth(80);
            teamResultsTable.getColumnModel().getColumn(8).setMinWidth(100);
            teamResultsTable.getColumnModel().getColumn(8).setPreferredWidth(100);
            teamResultsTable.getColumnModel().getColumn(9).setMinWidth(50);
            teamResultsTable.getColumnModel().getColumn(9).setPreferredWidth(50);
        }

        addResultsButton.setText("Add Match Results");
        addResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addResultsButtonActionPerformed(evt);
            }
        });

        addNewTeamsButton.setText("Add New Team(s)");
        addNewTeamsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewTeamsButtonActionPerformed(evt);
            }
        });

        undoResultsButton.setText("Undo Match Results");
        undoResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoResultsButtonActionPerformed(evt);
            }
        });

        editResultsButton.setText("Edit Match Results");
        editResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editResultsButtonActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        newDivisionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newDivisionMenuItem.setText("New Division");
        newDivisionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDivisionMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newDivisionMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exportToExcelMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exportToExcelMenuItem.setText("Export to Excel (.csv)");
        exportToExcelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToExcelMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exportToExcelMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu1.setText("Edit");

        addTeamsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        addTeamsMenuItem.setText("Add Team(s)");
        addTeamsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTeamsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(addTeamsMenuItem);

        addResultsMenuItem.setText("Add Results");
        addResultsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addResultsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(addResultsMenuItem);

        undoResultsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoResultsMenuItem.setText("Undo Results");
        undoResultsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoResultsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(undoResultsMenuItem);

        editResultsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        editResultsMenuItem.setText("Edit Results");
        editResultsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editResultsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(editResultsMenuItem);

        menuBar.add(jMenu1);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(undoResultsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editResultsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addNewTeamsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addResultsButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1005, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addResultsButton)
                    .addComponent(addNewTeamsButton)
                    .addComponent(undoResultsButton)
                    .addComponent(editResultsButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** The method called when the file/exit menu item is pressed. Prompts the
     * user to save if there are unsaved changes. closes the application
     * 
     * @param evt 
     */
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (teamManager.modified()) {
            int dialogButton = JOptionPane.YES_NO_CANCEL_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null,
                    "Do you wish to save changes before continuing?",
                    "Unsaved Changes!", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                saveMenuItemActionPerformed(evt);
            } else if (dialogResult == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /** Action performed when file/open menu item is pressed. Prompts the user
     * to save if there are unsaved changes, otherwise it prompts for a new
     * file to load and loads it
     * 
     * @param evt 
     */
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        if (teamManager.modified()) {
            int dialogButton = JOptionPane.YES_NO_CANCEL_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null,
                    "Do you wish to save changes before continuing?",
                    "Unsaved Changes!", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                saveMenuItemActionPerformed(evt);
            } else if (dialogResult == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(
                new File(System.getProperty("user.dir")));
        fileChooser.setDialogTitle("Specify a file to open");

        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Devision Results Files", "div");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showOpenDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToOpen = fileChooser.getSelectedFile();
            Path path = fileToOpen.toPath();
            try {
                TeamManager tempTeamManager = new TeamManager();
                tempTeamManager.openTeamsFile(path);
                openedFilename = fileToOpen.getAbsolutePath();
                teamManager = tempTeamManager;
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null,
                        "Invalid Division file", "Load Eror",
                        JOptionPane.ERROR_MESSAGE);
            }

        }
        refresh();
    }//GEN-LAST:event_openMenuItemActionPerformed

    /** Event for the edit/add teams menu item. opens the add teams dialog.
     * 
     * @param evt 
     */
    private void addTeamsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTeamsMenuItemActionPerformed

        AddTeamsDialog teamsDialog = new AddTeamsDialog(null, true, this);
        teamsDialog.setVisible(true);

    }//GEN-LAST:event_addTeamsMenuItemActionPerformed

    /** Event for the file/save menu item. Saves the data to the previously set
     * filename. If the filename is not set then calls the save as function.
     * 
     * @param evt 
     */
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        if (openedFilename.isEmpty()) {
            saveAsMenuItemActionPerformed(evt);
        } else {
            try {
                teamManager.saveTeamsFile(openedFilename);
            } catch (FileNotFoundException | UnsupportedEncodingException ex) {
                JOptionPane.showMessageDialog(null,
                        "Could not save file to that location", "Saving Eror",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_saveMenuItemActionPerformed

    /** Event for the file/save as menu item. prompts the user for a filename to
     * save to, then saves the data to that location.
     * 
     * @param evt 
     */
    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(
                new File(System.getProperty("user.dir")));
        fileChooser.setDialogTitle("Specify a file to save");

        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Devision Results Files", "div");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            if (fileToSave.exists()) {
                int dialogButton = JOptionPane.YES_NO_CANCEL_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null,
                        "That file already exists. Overwrite?",
                        "File Exists!", dialogButton);
                if (dialogResult == JOptionPane.NO_OPTION) {
                    saveAsMenuItemActionPerformed(evt);
                    return;
                } else if (dialogResult == JOptionPane.CANCEL_OPTION) {
                    return;
                }
            }

            try {
                String filename = fileToSave.getAbsolutePath();
                if (!filename.endsWith(".div")) {
                    filename += ".div";
                }
                teamManager.saveTeamsFile(filename);
                openedFilename = filename;
            } catch (FileNotFoundException | UnsupportedEncodingException ex) {
                JOptionPane.showMessageDialog(null,
                        "Could not save file to that location", "Saving Eror",
                        JOptionPane.ERROR_MESSAGE);
            }
        }


    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    /** Event for the file/new division menu item. prompts the user to save any
     * unsaved data then creates a blank division
     * 
     * @param evt 
     */
    private void newDivisionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDivisionMenuItemActionPerformed

        if (teamManager.modified()) {
            int dialogButton = JOptionPane.YES_NO_CANCEL_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null,
                    "Do you wish to save changes before continuing?",
                    "Unsaved Changes!", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                saveMenuItemActionPerformed(evt);
            } else if (dialogResult == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }

        teamManager = new TeamManager();
        refresh();
    }//GEN-LAST:event_newDivisionMenuItemActionPerformed

    /** Event for the add new teams button. opens the new teams dialog
     * 
     * @param evt 
     */
    private void addNewTeamsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewTeamsButtonActionPerformed
        addTeamsMenuItemActionPerformed(evt);
    }//GEN-LAST:event_addNewTeamsButtonActionPerformed

    /** Event for the edit/add results menu item. opens the match results dialog
     * 
     * @param evt 
     */
    private void addResultsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addResultsMenuItemActionPerformed
        MatchResultsDialog resultsDialog = new MatchResultsDialog(null, true,
                teamManager, this);
        resultsDialog.setVisible(true);
    }//GEN-LAST:event_addResultsMenuItemActionPerformed

    /** Event for the add results button. opens the match results dialog
     * 
     * @param evt 
     */
    private void addResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addResultsButtonActionPerformed
        addResultsMenuItemActionPerformed(evt);
    }//GEN-LAST:event_addResultsButtonActionPerformed

    /** prompts the user for a filename and saves a csv file to that location
     * 
     * @param evt 
     */
    private void exportToExcelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToExcelMenuItemActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(
                new File(System.getProperty("user.dir")));
        fileChooser.setDialogTitle("Specify Export file");

        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Excel documents(.csv)", "csv");
        fileChooser.setFileFilter(filter);

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            if (fileToSave.exists()) {
                int dialogButton = JOptionPane.YES_NO_CANCEL_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null,
                        "That file already exists. Overwrite?",
                        "File Exists!", dialogButton);
                if (dialogResult == JOptionPane.NO_OPTION) {
                    exportToExcelMenuItemActionPerformed(evt);
                    return;
                } else if (dialogResult == JOptionPane.CANCEL_OPTION) {
                    return;
                }
            }

            try {
                String filename = fileToSave.getAbsolutePath();
                if (!filename.endsWith(".csv")) {
                    filename += ".csv";
                }
                teamManager.exportToCSV(filename);
            } catch (FileNotFoundException | UnsupportedEncodingException ex) {
                JOptionPane.showMessageDialog(null,
                        "Could not save file to that location", "Export Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_exportToExcelMenuItemActionPerformed

    private void undoResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoResultsButtonActionPerformed
        teamManager.undoMatchResults();
        refresh();
    }//GEN-LAST:event_undoResultsButtonActionPerformed

    private void undoResultsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoResultsMenuItemActionPerformed
        undoResultsButtonActionPerformed(evt);
    }//GEN-LAST:event_undoResultsMenuItemActionPerformed

    private void editResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editResultsButtonActionPerformed
        Object[][] results = teamManager.undoMatchResults();
        MatchResultsDialog resultsDialog = new MatchResultsDialog(null, true,
                results, teamManager, this);
        resultsDialog.setVisible(true);
        
    }//GEN-LAST:event_editResultsButtonActionPerformed

    private void editResultsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editResultsMenuItemActionPerformed
        editResultsButtonActionPerformed(evt);
    }//GEN-LAST:event_editResultsMenuItemActionPerformed

    /** adds the given teams to the division
     * 
     * @param teams - array of team names
     */
    public void addTeams(String[] teams) {
        teamManager.addTeams(teams);
        refresh();
    }

    /** refreshes the view with current data
     * 
     */
    public void refresh() {
        Team tempTeam;
        teamManager.sort();
        DefaultTableModel model = (DefaultTableModel)
                teamResultsTable.getModel();

        for (int i = model.getRowCount() - 1; i > -1; --i) {
            model.removeRow(i);
        }

        for (int i = 0; i < teamManager.length; i++) {
            tempTeam = teamManager.getTeam(i);

            model.addRow(new Object[]{i + 1, tempTeam.getName(),
                tempTeam.getWins(), tempTeam.getLosses(),
                tempTeam.getScoredDraws(), tempTeam.getNoScoreDraws(),
                tempTeam.getGoalsScored(), tempTeam.getGoalsAgainst(),
                tempTeam.getGoalDifference(), tempTeam.getScore()});
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GameManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addNewTeamsButton;
    private javax.swing.JButton addResultsButton;
    private javax.swing.JMenuItem addResultsMenuItem;
    private javax.swing.JMenuItem addTeamsMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JButton editResultsButton;
    private javax.swing.JMenuItem editResultsMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportToExcelMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newDivisionMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTable teamResultsTable;
    private javax.swing.JButton undoResultsButton;
    private javax.swing.JMenuItem undoResultsMenuItem;
    // End of variables declaration//GEN-END:variables

}
